From 0debe86e1f6687c3938c25e4421b64e7651a42bc Mon Sep 17 00:00:00 2001
From: SnwMds <snwmds@protonmail.com>
Date: Mon, 7 Sep 2020 16:22:37 -0300
Subject: [PATCH] Add "server_references" directive to nginx
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Syntax: server_references on | off;
Default: server_references on;
Context: http, server, location

Enables or disables emitting nginx server references (e.g nginx/1.19.2) on error pages and in the “Server” response header field.
---
 contrib/vim/syntax/nginx.vim             |  1 +
 src/http/ngx_http_core_module.c          | 18 +++++
 src/http/ngx_http_core_module.h          |  4 +
 src/http/ngx_http_header_filter_module.c | 50 ++++++------
 src/http/ngx_http_special_response.c     | 12 ++-
 src/http/v2/ngx_http_v2_filter_module.c  | 96 +++++++++++++-----------
 6 files changed, 112 insertions(+), 69 deletions(-)

diff --git a/contrib/vim/syntax/nginx.vim b/contrib/vim/syntax/nginx.vim
index 8304708..6441ffc 100644
--- a/contrib/vim/syntax/nginx.vim
+++ b/contrib/vim/syntax/nginx.vim
@@ -570,6 +570,7 @@ syn keyword ngxDirective contained server_name_in_redirect
 syn keyword ngxDirective contained server_names_hash_bucket_size
 syn keyword ngxDirective contained server_names_hash_max_size
 syn keyword ngxDirective contained server_tokens
+syn keyword ngxDirective contained server_references
 syn keyword ngxDirective contained session_log
 syn keyword ngxDirective contained session_log_format
 syn keyword ngxDirective contained session_log_zone
diff --git a/src/http/ngx_http_core_module.c b/src/http/ngx_http_core_module.c
index 3671558..0a2d705 100644
--- a/src/http/ngx_http_core_module.c
+++ b/src/http/ngx_http_core_module.c
@@ -129,6 +129,13 @@ static ngx_conf_enum_t  ngx_http_core_server_tokens[] = {
 };
 
 
+static ngx_conf_enum_t  ngx_http_core_server_references[] = {
+    { ngx_string("off"), NGX_HTTP_SERVER_REFERENCES_OFF },
+    { ngx_string("on"), NGX_HTTP_SERVER_REFERENCES_ON },
+    { ngx_null_string, 0 }
+};
+
+
 static ngx_conf_enum_t  ngx_http_core_if_modified_since[] = {
     { ngx_string("off"), NGX_HTTP_IMS_OFF },
     { ngx_string("exact"), NGX_HTTP_IMS_EXACT },
@@ -628,6 +635,13 @@ static ngx_command_t  ngx_http_core_commands[] = {
       offsetof(ngx_http_core_loc_conf_t, server_tokens),
       &ngx_http_core_server_tokens },
 
+    { ngx_string("server_references"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_enum_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_core_loc_conf_t, server_references),
+      &ngx_http_core_server_references },
+
     { ngx_string("if_modified_since"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
       ngx_conf_set_enum_slot,
@@ -3514,6 +3528,7 @@ ngx_http_core_create_loc_conf(ngx_conf_t *cf)
     clcf->chunked_transfer_encoding = NGX_CONF_UNSET;
     clcf->etag = NGX_CONF_UNSET;
     clcf->server_tokens = NGX_CONF_UNSET_UINT;
+    clcf->server_references = NGX_CONF_UNSET_UINT;
     clcf->types_hash_max_size = NGX_CONF_UNSET_UINT;
     clcf->types_hash_bucket_size = NGX_CONF_UNSET_UINT;
 
@@ -3794,6 +3809,9 @@ ngx_http_core_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
     ngx_conf_merge_uint_value(conf->server_tokens, prev->server_tokens,
                               NGX_HTTP_SERVER_TOKENS_ON);
 
+    ngx_conf_merge_uint_value(conf->server_references, prev->server_references,
+                              NGX_HTTP_SERVER_REFERENCES_ON);
+
     ngx_conf_merge_ptr_value(conf->open_file_cache,
                               prev->open_file_cache, NULL);
 
diff --git a/src/http/ngx_http_core_module.h b/src/http/ngx_http_core_module.h
index 2aadae7..f0cd667 100644
--- a/src/http/ngx_http_core_module.h
+++ b/src/http/ngx_http_core_module.h
@@ -60,6 +60,9 @@ typedef struct ngx_thread_pool_s  ngx_thread_pool_t;
 #define NGX_HTTP_SERVER_TOKENS_BUILD    2
 
 
+#define NGX_HTTP_SERVER_REFERENCES_OFF      0
+#define NGX_HTTP_SERVER_REFERENCES_ON       1
+
 typedef struct ngx_http_location_tree_node_s  ngx_http_location_tree_node_t;
 typedef struct ngx_http_core_loc_conf_s  ngx_http_core_loc_conf_t;
 
@@ -395,6 +398,7 @@ struct ngx_http_core_loc_conf_s {
     ngx_flag_t    log_subrequest;          /* log_subrequest */
     ngx_flag_t    recursive_error_pages;   /* recursive_error_pages */
     ngx_uint_t    server_tokens;           /* server_tokens */
+    ngx_uint_t    server_references;           /* server_references */
     ngx_flag_t    chunked_transfer_encoding; /* chunked_transfer_encoding */
     ngx_flag_t    etag;                    /* etag */
 
diff --git a/src/http/ngx_http_header_filter_module.c b/src/http/ngx_http_header_filter_module.c
index 9b89405..68d4326 100644
--- a/src/http/ngx_http_header_filter_module.c
+++ b/src/http/ngx_http_header_filter_module.c
@@ -279,15 +279,17 @@ ngx_http_header_filter(ngx_http_request_t *r)
 
     clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
 
-    if (r->headers_out.server == NULL) {
-        if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_ON) {
-            len += sizeof(ngx_http_server_full_string) - 1;
-
-        } else if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_BUILD) {
-            len += sizeof(ngx_http_server_build_string) - 1;
-
-        } else {
-            len += sizeof(ngx_http_server_string) - 1;
+    if (clcf->server_references == NGX_HTTP_SERVER_REFERENCES_ON) {
+        if (r->headers_out.server == NULL) {
+            if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_ON) {
+                len += sizeof(ngx_http_server_full_string) - 1;
+    
+            } else if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_BUILD) {
+                len += sizeof(ngx_http_server_build_string) - 1;
+    
+            } else {
+                len += sizeof(ngx_http_server_string) - 1;
+            }
         }
     }
 
@@ -448,21 +450,23 @@ ngx_http_header_filter(ngx_http_request_t *r)
     }
     *b->last++ = CR; *b->last++ = LF;
 
-    if (r->headers_out.server == NULL) {
-        if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_ON) {
-            p = ngx_http_server_full_string;
-            len = sizeof(ngx_http_server_full_string) - 1;
-
-        } else if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_BUILD) {
-            p = ngx_http_server_build_string;
-            len = sizeof(ngx_http_server_build_string) - 1;
-
-        } else {
-            p = ngx_http_server_string;
-            len = sizeof(ngx_http_server_string) - 1;
+    if (clcf->server_references == NGX_HTTP_SERVER_REFERENCES_ON) {
+        if (r->headers_out.server == NULL) {
+            if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_ON) {
+                p = ngx_http_server_full_string;
+                len = sizeof(ngx_http_server_full_string) - 1;
+    
+            } else if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_BUILD) {
+                p = ngx_http_server_build_string;
+                len = sizeof(ngx_http_server_build_string) - 1;
+    
+            } else {
+                p = ngx_http_server_string;
+                len = sizeof(ngx_http_server_string) - 1;
+            }
+    
+            b->last = ngx_cpymem(b->last, p, len);
         }
-
-        b->last = ngx_cpymem(b->last, p, len);
     }
 
     if (r->headers_out.date == NULL) {
diff --git a/src/http/ngx_http_special_response.c b/src/http/ngx_http_special_response.c
index 76e6705..8754a69 100644
--- a/src/http/ngx_http_special_response.c
+++ b/src/http/ngx_http_special_response.c
@@ -39,6 +39,12 @@ static u_char ngx_http_error_tail[] =
 ;
 
 
+static u_char ngx_http_error_no_server_reference[] =
+"</body>" CRLF
+"</html>" CRLF
+;
+
+
 static u_char ngx_http_msie_padding[] =
 "<!-- a padding to disable MSIE and Chrome friendly error page -->" CRLF
 "<!-- a padding to disable MSIE and Chrome friendly error page -->" CRLF
@@ -675,7 +681,11 @@ ngx_http_send_special_response(ngx_http_request_t *r,
     ngx_uint_t    msie_padding;
     ngx_chain_t   out[3];
 
-    if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_ON) {
+    if (clcf->server_references == NGX_HTTP_SERVER_REFERENCES_OFF) {
+    	len = sizeof(ngx_http_error_no_server_reference) - 1;
+        tail = ngx_http_error_no_server_reference;
+
+    } else if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_ON) {
         len = sizeof(ngx_http_error_full_tail) - 1;
         tail = ngx_http_error_full_tail;
 
diff --git a/src/http/v2/ngx_http_v2_filter_module.c b/src/http/v2/ngx_http_v2_filter_module.c
index a6e5e7d..4fcc3ef 100644
--- a/src/http/v2/ngx_http_v2_filter_module.c
+++ b/src/http/v2/ngx_http_v2_filter_module.c
@@ -259,16 +259,18 @@ ngx_http_v2_header_filter(ngx_http_request_t *r)
 
     clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
 
-    if (r->headers_out.server == NULL) {
-
-        if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_ON) {
-            len += 1 + nginx_ver_len;
-
-        } else if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_BUILD) {
-            len += 1 + nginx_ver_build_len;
-
-        } else {
-            len += 1 + sizeof(nginx);
+    if (clcf->server_references == NGX_HTTP_SERVER_REFERENCES_ON) {
+        if (r->headers_out.server == NULL) {
+    
+            if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_ON) {
+                len += 1 + nginx_ver_len;
+    
+            } else if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_BUILD) {
+                len += 1 + nginx_ver_build_len;
+    
+            } else {
+                len += 1 + sizeof(nginx);
+            }
         }
     }
 
@@ -463,46 +465,50 @@ ngx_http_v2_header_filter(ngx_http_request_t *r)
         pos = ngx_sprintf(pos, "%03ui", r->headers_out.status);
     }
 
-    if (r->headers_out.server == NULL) {
-
-        if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_ON) {
-            ngx_log_debug1(NGX_LOG_DEBUG_HTTP, fc->log, 0,
-                           "http2 output header: \"server: %s\"",
-                           NGINX_VER);
-
-        } else if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_BUILD) {
-            ngx_log_debug1(NGX_LOG_DEBUG_HTTP, fc->log, 0,
-                           "http2 output header: \"server: %s\"",
-                           NGINX_VER_BUILD);
-
-        } else {
-            ngx_log_debug0(NGX_LOG_DEBUG_HTTP, fc->log, 0,
-                           "http2 output header: \"server: nginx\"");
+    if (clcf->server_references == NGX_HTTP_SERVER_REFERENCES_ON) {
+        if (r->headers_out.server == NULL) {
+    
+            if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_ON) {
+                ngx_log_debug1(NGX_LOG_DEBUG_HTTP, fc->log, 0,
+                               "http2 output header: \"server: %s\"",
+                               NGINX_VER);
+    
+            } else if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_BUILD) {
+                ngx_log_debug1(NGX_LOG_DEBUG_HTTP, fc->log, 0,
+                               "http2 output header: \"server: %s\"",
+                               NGINX_VER_BUILD);
+    
+            } else {
+                ngx_log_debug0(NGX_LOG_DEBUG_HTTP, fc->log, 0,
+                               "http2 output header: \"server: nginx\"");
+            }
         }
 
         *pos++ = ngx_http_v2_inc_indexed(NGX_HTTP_V2_SERVER_INDEX);
 
-        if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_ON) {
-            if (nginx_ver[0] == '\0') {
-                p = ngx_http_v2_write_value(nginx_ver, (u_char *) NGINX_VER,
-                                            sizeof(NGINX_VER) - 1, tmp);
-                nginx_ver_len = p - nginx_ver;
-            }
-
-            pos = ngx_cpymem(pos, nginx_ver, nginx_ver_len);
-
-        } else if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_BUILD) {
-            if (nginx_ver_build[0] == '\0') {
-                p = ngx_http_v2_write_value(nginx_ver_build,
-                                            (u_char *) NGINX_VER_BUILD,
-                                            sizeof(NGINX_VER_BUILD) - 1, tmp);
-                nginx_ver_build_len = p - nginx_ver_build;
+        if (clcf->server_references == NGX_HTTP_SERVER_REFERENCES_ON) {
+            if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_ON) {
+                if (nginx_ver[0] == '\0') {
+                    p = ngx_http_v2_write_value(nginx_ver, (u_char *) NGINX_VER,
+                                                sizeof(NGINX_VER) - 1, tmp);
+                    nginx_ver_len = p - nginx_ver;
+                }
+    
+                pos = ngx_cpymem(pos, nginx_ver, nginx_ver_len);
+    
+            } else if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_BUILD) {
+                if (nginx_ver_build[0] == '\0') {
+                    p = ngx_http_v2_write_value(nginx_ver_build,
+                                                (u_char *) NGINX_VER_BUILD,
+                                                sizeof(NGINX_VER_BUILD) - 1, tmp);
+                    nginx_ver_build_len = p - nginx_ver_build;
+                }
+    
+                pos = ngx_cpymem(pos, nginx_ver_build, nginx_ver_build_len);
+    
+            } else {
+                pos = ngx_cpymem(pos, nginx, sizeof(nginx));
             }
-
-            pos = ngx_cpymem(pos, nginx_ver_build, nginx_ver_build_len);
-
-        } else {
-            pos = ngx_cpymem(pos, nginx, sizeof(nginx));
         }
     }
 
-- 
2.28.0

